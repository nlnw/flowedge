// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.20;

/**
 * @title INativeConverter
 * @notice Base interface for Native Converter contracts
 * @dev Converts between native and bridged vault tokens
 * @custom:tags vaultbridge,converter,bridge,native
 */
interface INativeConverter {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error AssetsTooLarge(uint256 availableAssets, uint256 requestedAssets);
    error EnforcedPause();
    error ExpectedPause();
    error InvalidAmountInERC20Permit(uint256 amount, uint256 minimumAmount);
    error InvalidAssets();
    error InvalidCustomToken();
    error InvalidDestinationNetworkId();
    error InvalidInitialization();
    error InvalidLayerXLxlyId();
    error InvalidLxLyBridge();
    error InvalidMigrationManager();
    error InvalidNonMigratableBackingPercentage();
    error InvalidOwner();
    error InvalidOwnerInERC20Permit(address owner, address expectedOwner);
    error InvalidPermitData();
    error InvalidReceiver();
    error InvalidSelectorInERC20Permit(bytes4 selector);
    error InvalidShares();
    error InvalidSpenderInERC20Permit(address spender, address expectedSpender);
    error InvalidUnderlyingToken();
    error NonMatchingCustomTokenDecimals(
        uint8 customTokenDecimals,
        uint8 originalUnderlyingTokenDecimals
    );
    error NonMatchingUnderlyingTokenDecimals(
        uint8 underlyingTokenDecimals,
        uint8 originalUnderlyingTokenDecimals
    );
    error NotInitializing();
    error OnlyMigrator();
    error ReentrancyGuardReentrantCall();
    error SafeERC20FailedOperation(address token);
    event Initialized(uint64 version);
    event MigrationStarted(
        uint256 indexed mintedCustomToken,
        uint256 indexed migratedBacking
    );
    event NonMigratableBackingPercentageSet(
        uint256 nonMigratableBackingPercentage
    );
    event Paused(address account);
    event RoleAdminChanged(
        bytes32 indexed role,
        bytes32 indexed previousAdminRole,
        bytes32 indexed newAdminRole
    );
    event RoleGranted(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event RoleRevoked(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event Unpaused(address account);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

    function MIGRATOR_ROLE() external view returns (bytes32);

    function PAUSER_ROLE() external view returns (bytes32);

    function backingOnLayerY() external view returns (uint256);

    function convert(uint256 assets, address receiver)
        external
        returns (uint256 shares);

    function convertWithPermit(
        uint256 assets,
        address receiver,
        bytes memory permitData
    ) external returns (uint256 shares);

    function customToken() external view returns (address);

    function deconvert(uint256 shares, address receiver)
        external
        returns (uint256 assets);

    function deconvertAndBridge(
        uint256 shares,
        address receiver,
        uint32 destinationNetworkId,
        bool forceUpdateGlobalExitRoot
    ) external returns (uint256 assets);

    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    function grantRole(bytes32 role, address account) external;

    function hasRole(bytes32 role, address account)
        external
        view
        returns (bool);

    function initialize(
        address owner_,
        uint8 originalUnderlyingTokenDecimals_,
        address customToken_,
        address underlyingToken_,
        address lxlyBridge_,
        uint32 layerXLxlyId_,
        uint256 nonMigratableBackingPercentage_,
        address migrationManager_
    ) external;

    function layerXLxlyId() external view returns (uint32);

    function lxlyBridge() external view returns (address);

    function lxlyId() external view returns (uint32);

    function maxDeconvert(address owner)
        external
        view
        returns (uint256 maxShares);

    function migratableBacking() external view returns (uint256);

    function migrateBackingToLayerX(uint256 assets) external;

    function migrationManager() external view returns (address);

    function nonMigratableBackingPercentage() external view returns (uint256);

    function pause() external;

    function paused() external view returns (bool);

    function renounceRole(bytes32 role, address callerConfirmation) external;

    function revokeRole(bytes32 role, address account) external;

    function setNonMigratableBackingPercentage(
        uint256 nonMigratableBackingPercentage_
    ) external;

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function underlyingToken() external view returns (address);

    function unpause() external;

    function version() external pure returns (string memory);
}