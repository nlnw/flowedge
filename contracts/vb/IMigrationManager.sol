// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.20;

/**
 * @title IMigrationManager
 * @notice Interface for the Migration Manager contract. This is deployed on the
   origin chain - for "Katana" this means Ethereum, for "Bokuto" this means
   Sepolia. The address for each context is different, and indicated in custom
   tags. Tatara does not have a MigrationManager.
 * @custom:bokuto sepolia:0x16B46094cb1eE593181Ba2d997E77E88D7E9Ab8F
 * @custom:katana ethereum:0x417d01B64Ea30C4E163873f3a1f77b727c689e02
 * @custom:tags vaultbridge,migration,manager,bridge
 */
interface IMigrationManager {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error CannotWrapGasToken();
    error EnforcedPause();
    error ExpectedPause();
    error InsufficientUnderlyingTokenBalanceAfterWrapping(
        uint256 newBalance,
        uint256 expectedBalance
    );
    error InvalidInitialization();
    error InvalidLayerYLxLyId();
    error InvalidLxLyBridge();
    error InvalidNativeConverter();
    error InvalidOwner();
    error InvalidUnderlyingToken();
    error InvalidVbToken();
    error NonMatchingInputLengths();
    error NotInitializing();
    error ReentrancyGuardReentrantCall();
    error SafeERC20FailedOperation(address token);
    error Unauthorized();
    event Initialized(uint64 version);
    event NativeConverterConfigured(
        uint32 indexed layerYLxlyId,
        address indexed nativeConverter,
        address indexed vbToken
    );
    event Paused(address account);
    event RoleAdminChanged(
        bytes32 indexed role,
        bytes32 indexed previousAdminRole,
        bytes32 indexed newAdminRole
    );
    event RoleGranted(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event RoleRevoked(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event Unpaused(address account);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

    function PAUSER_ROLE() external view returns (bytes32);

    function configureNativeConverters(
        uint32[] memory layerYLxlyIds,
        address[] memory nativeConverters,
        address vbToken
    ) external;

    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    function grantRole(bytes32 role, address account) external;

    function hasRole(bytes32 role, address account)
        external
        view
        returns (bool);

    function initialize(address owner_, address lxlyBridge_) external;

    function lxlyBridge() external view returns (address);

    function nativeConvertersConfiguration(
        uint32 layerYLxlyId,
        address nativeConverter
    ) external view returns (MigrationManager.TokenPair memory tokenPair);

    function onMessageReceived(
        address originAddress,
        uint32 originNetwork,
        bytes memory data
    ) external payable;

    function pause() external;

    function paused() external view returns (bool);

    function renounceRole(bytes32 role, address callerConfirmation) external;

    function revokeRole(bytes32 role, address account) external;

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function unpause() external;

    function version() external pure returns (string memory);

    receive() external payable;
}

interface MigrationManager {
    struct TokenPair {
        address vbToken;
        address underlyingToken;
    }
}
