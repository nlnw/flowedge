// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.20;

/**
 * @title ITokenAttributesRepository
 * @notice Dynamic on-chain storage of token attributes in a public-good repository (ERC7508)
 * @dev Interface for managing token attributes across NFT collections
 * @custom:katana 0xC3f5961F6Bf6A60A6d2F9f45Ec477E1E46144827
 * @custom:bokuto 0xC3f5961F6Bf6A60A6d2F9f45Ec477E1E46144827
 * @custom:tags nft,erc721,rmrk,attributes,repository
 */
interface ITokenAttributesRepository {
    error CollaboratorArraysNotEqualLength();
    error CollectionNotRegistered();
    error ExpiredDeadline();
    error InvalidSignature();
    error LengthsMismatch();
    error NotCollectionCollaborator();
    error NotCollectionOwner();
    error NotCollectionOwnerOrCollaborator();
    error NotSpecificAddress();
    error NotTokenOwner();
    error OwnableNotImplemented();
    event AccessControlRegistration(
        address indexed collection,
        address indexed owner,
        address indexed registeringAddress,
        bool useOwnable
    );
    event AccessControlUpdate(
        address indexed collection,
        string key,
        uint8 accessType,
        address specificAddress
    );
    event AddressAttributeUpdated(
        address indexed collection,
        uint256 indexed tokenId,
        string key,
        address value
    );
    event BoolAttributeUpdated(
        address indexed collection,
        uint256 indexed tokenId,
        string key,
        bool value
    );
    event BytesAttributeUpdated(
        address indexed collection,
        uint256 indexed tokenId,
        string key,
        bytes value
    );
    event CollaboratorUpdate(
        address indexed collection,
        address indexed collaborator,
        bool isCollaborator
    );
    event IntAttributeUpdated(
        address indexed collection,
        uint256 indexed tokenId,
        string key,
        int256 value
    );
    event MetadataURIUpdated(
        address indexed collection,
        string attributesMetadataURI
    );
    event StringAttributeUpdated(
        address indexed collection,
        uint256 indexed tokenId,
        string key,
        string value
    );
    event UintAttributeUpdated(
        address indexed collection,
        uint256 indexed tokenId,
        string key,
        uint256 value
    );

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function SET_ADDRESS_ATTRIBUTE_TYPEHASH() external view returns (bytes32);

    function SET_BOOL_ATTRIBUTE_TYPEHASH() external view returns (bytes32);

    function SET_BYTES_ATTRIBUTE_TYPEHASH() external view returns (bytes32);

    function SET_INT_ATTRIBUTE_TYPEHASH() external view returns (bytes32);

    function SET_STRING_ATTRIBUTE_TYPEHASH() external view returns (bytes32);

    function SET_UINT_ATTRIBUTE_TYPEHASH() external view returns (bytes32);

    function getAddressAttribute(
        address collection,
        uint256 tokenId,
        string memory key
    ) external view returns (address attribute);

    function getAddressAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        string[] memory attributeKeys
    ) external view returns (address[] memory attributes);

    function getAttributes(
        address collection,
        uint256 tokenId,
        string[] memory addressKeys,
        string[] memory boolKeys,
        string[] memory bytesKeys,
        string[] memory intKeys,
        string[] memory stringKeys,
        string[] memory uintKeys
    )
        external
        view
        returns (
            address[] memory addressAttributes,
            bool[] memory boolAttributes,
            bytes[] memory bytesAttributes,
            int256[] memory intAttributes,
            string[] memory stringAttributes,
            uint256[] memory uintAttributes
        );

    function getAttributesMetadataURIForCollection(address collection)
        external
        view
        returns (string memory attributesMetadataURI);

    function getBoolAttribute(
        address collection,
        uint256 tokenId,
        string memory key
    ) external view returns (bool attribute);

    function getBoolAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        string[] memory attributeKeys
    ) external view returns (bool[] memory attributes);

    function getBytesAttribute(
        address collection,
        uint256 tokenId,
        string memory key
    ) external view returns (bytes memory attribute);

    function getBytesAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        string[] memory attributeKeys
    ) external view returns (bytes[] memory attributes);

    function getIntAttribute(
        address collection,
        uint256 tokenId,
        string memory key
    ) external view returns (int256 attribute);

    function getIntAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        string[] memory attributeKeys
    ) external view returns (int256[] memory attributes);

    function getStringAttribute(
        address collection,
        uint256 tokenId,
        string memory key
    ) external view returns (string memory attribute);

    function getStringAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        string[] memory attributeKeys
    ) external view returns (string[] memory attributes);

    function getUintAttribute(
        address collection,
        uint256 tokenId,
        string memory key
    ) external view returns (uint256 attribute);

    function getUintAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        string[] memory attributeKeys
    ) external view returns (uint256[] memory attributes);

    function isCollaborator(address collaborator, address collection)
        external
        view
        returns (bool isCollaborator_);

    function isSpecificAddress(
        address specificAddress,
        address collection,
        string memory key
    ) external view returns (bool isSpecificAddress_);

    function manageAccessControl(
        address collection,
        string memory key,
        uint8 accessType,
        address specificAddress
    ) external;

    function manageCollaborators(
        address collection,
        address[] memory collaboratorAddresses,
        bool[] memory collaboratorAddressAccess
    ) external;

    function prepareMessageToPresignAddressAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        address value,
        uint256 deadline
    ) external view returns (bytes32 message);

    function prepareMessageToPresignBoolAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        bool value,
        uint256 deadline
    ) external view returns (bytes32 message);

    function prepareMessageToPresignBytesAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        bytes memory value,
        uint256 deadline
    ) external view returns (bytes32 message);

    function prepareMessageToPresignIntAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        int256 value,
        uint256 deadline
    ) external view returns (bytes32 message);

    function prepareMessageToPresignStringAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        string memory value,
        uint256 deadline
    ) external view returns (bytes32 message);

    function prepareMessageToPresignUintAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        uint256 value,
        uint256 deadline
    ) external view returns (bytes32 message);

    function presignedSetAddressAttribute(
        address setter,
        address collection,
        uint256 tokenId,
        string memory key,
        address value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    function presignedSetBoolAttribute(
        address setter,
        address collection,
        uint256 tokenId,
        string memory key,
        bool value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    function presignedSetBytesAttribute(
        address setter,
        address collection,
        uint256 tokenId,
        string memory key,
        bytes memory value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    function presignedSetIntAttribute(
        address setter,
        address collection,
        uint256 tokenId,
        string memory key,
        int256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    function presignedSetStringAttribute(
        address setter,
        address collection,
        uint256 tokenId,
        string memory key,
        string memory value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    function presignedSetUintAttribute(
        address setter,
        address collection,
        uint256 tokenId,
        string memory key,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    function registerAccessControl(
        address collection,
        address owner,
        bool useOwnable
    ) external;

    function setAddressAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        address value
    ) external;

    function setAddressAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        IERC7508.AddressAttribute[] memory attributes
    ) external;

    function setAttributes(
        address collection,
        uint256 tokenId,
        IERC7508.AddressAttribute[] memory addressAttributes,
        IERC7508.BoolAttribute[] memory boolAttributes,
        IERC7508.BytesAttribute[] memory bytesAttributes,
        IERC7508.IntAttribute[] memory intAttributes,
        IERC7508.StringAttribute[] memory stringAttributes,
        IERC7508.UintAttribute[] memory uintAttributes
    ) external;

    function setAttributesMetadataURIForCollection(
        address collection,
        string memory attributesMetadataURI
    ) external;

    function setBoolAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        bool value
    ) external;

    function setBoolAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        IERC7508.BoolAttribute[] memory attributes
    ) external;

    function setBytesAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        bytes memory value
    ) external;

    function setBytesAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        IERC7508.BytesAttribute[] memory attributes
    ) external;

    function setIntAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        int256 value
    ) external;

    function setIntAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        IERC7508.IntAttribute[] memory attributes
    ) external;

    function setStringAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        string memory value
    ) external;

    function setStringAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        IERC7508.StringAttribute[] memory attributes
    ) external;

    function setUintAttribute(
        address collection,
        uint256 tokenId,
        string memory key,
        uint256 value
    ) external;

    function setUintAttributes(
        address[] memory collections,
        uint256[] memory tokenIds,
        IERC7508.UintAttribute[] memory attributes
    ) external;

    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

interface IERC7508 {
    struct AddressAttribute {
        string key;
        address value;
    }

    struct BoolAttribute {
        string key;
        bool value;
    }

    struct BytesAttribute {
        string key;
        bytes value;
    }

    struct IntAttribute {
        string key;
        int256 value;
    }

    struct StringAttribute {
        string key;
        string value;
    }

    struct UintAttribute {
        string key;
        uint256 value;
    }
}
