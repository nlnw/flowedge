// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.20;

/**
 * @title IBulkWriter
 * @notice Utility batch methods to interact with ERCs 7401 (Nestable NFTs) and 6220 (Equippable NFTs)
 * @dev Interface for bulk operations on RMRK NFT collections
 * @custom:katana 0xcd891c3de90dcdF99549E9B6402BFAa695DEc69B
 * @custom:bokuto 0xA681A7BE7A87bDA505c1a947b172b8A1988E329A
 * @custom:tags nft,erc721,rmrk,bulk,utility
 */
interface IBulkWriter {
    error RMRKCanOnlyDoBulkOperationsOnOwnedTokens();
    error RMRKCanOnlyDoBulkOperationsWithOneTokenAtATime();

    function bulkEquip(
        address collection,
        uint256 tokenId,
        RMRKBulkWriter.IntakeUnequip[] memory unequips,
        IERC6220.IntakeEquip[] memory equips
    ) external;

    function bulkTransferAllChildren(
        address collection,
        uint256 tokenId,
        address to,
        uint256 destinationId
    ) external;

    function bulkTransferChildren(
        address collection,
        uint256 tokenId,
        uint256[] memory childrenIndexes,
        address to,
        uint256 destinationId
    ) external;

    function replaceEquip(address collection, IERC6220.IntakeEquip memory data)
        external;
}

interface RMRKBulkWriter {
    struct IntakeUnequip {
        uint64 assetId;
        uint64 slotPartId;
    }
}

interface IERC6220 {
    struct IntakeEquip {
        uint256 tokenId;
        uint256 childIndex;
        uint64 assetId;
        uint64 slotPartId;
        uint64 childAssetId;
    }
}