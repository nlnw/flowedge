// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.20;

/**
 * @title ICatalogUtils
 * @notice Utility methods to interact with Catalog instances (ERC6220)
 * @dev Interface for catalog utility operations in RMRK NFT ecosystem
 * @custom:katana 0xB1e10B768E9d56A51f1C80d70414989ECAf87fd0
 * @custom:bokuto 0xB1e10B768E9d56A51f1C80d70414989ECAf87fd0
 * @custom:tags nft,erc721,rmrk,catalog,utility
 */
interface ICatalogUtils {
    error RMRKNotComposableAsset();

    function getCatalogData(address catalog)
        external
        view
        returns (
            address owner,
            string memory type_,
            string memory metadataURI
        );

    function getCatalogDataAndExtendedParts(
        address catalog,
        uint64[] memory partIds
    )
        external
        view
        returns (
            address owner,
            string memory type_,
            string memory metadataURI,
            RMRKCatalogUtils.ExtendedPart[] memory parts
        );

    function getExtendedParts(address catalog, uint64[] memory partIds)
        external
        view
        returns (RMRKCatalogUtils.ExtendedPart[] memory parts);

    function getOrphanEquipmentsFromChildAsset(
        address parentAddress,
        uint256 parentId
    )
        external
        view
        returns (RMRKCatalogUtils.ExtendedEquipment[] memory equipments);

    function getOrphanEquipmentsFromParentAsset(
        address parentAddress,
        uint256 parentId,
        address catalogAddress,
        uint64[] memory slotPartIds
    )
        external
        view
        returns (RMRKCatalogUtils.ExtendedEquipment[] memory equipments);

    function getSlotPartsAndCatalog(
        address tokenAddress,
        uint256 tokenId,
        uint64 assetId
    )
        external
        view
        returns (uint64[] memory parentSlotPartIds, address catalogAddress);

    function splitSlotAndFixedParts(
        uint64[] memory allPartIds,
        address catalogAddress
    )
        external
        view
        returns (uint64[] memory slotPartIds, uint64[] memory fixedPartIds);
}

interface RMRKCatalogUtils {
    struct ExtendedPart {
        uint64 partId;
        uint8 itemType;
        uint8 z;
        address[] equippable;
        bool equippableToAll;
        string metadataURI;
    }

    struct ExtendedEquipment {
        uint64 parentAssetId;
        uint64 slotId;
        address childAddress;
        uint256 childId;
        uint64 childAssetId;
    }
}